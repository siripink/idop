# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  #apk: '../build/app/outputs/apk/release/app-release.apk'
  lane :deploy_alpha do  
    
    upload_to_play_store(
        track: 'alpha',
        aab: '../build/app/outputs/bundle/release/app.aab'
    )
  end

#############################################
  ##
  ##  Increase APK Version Code (e.g. 760) and Version Name (e.g. 7.6.0)
  ##  Commit and Push Changes
  ##  Usage: fastlane bump_version version:770
  #############################################
  lane :bump_version do |options|
    versionCodeString = options[:version]
    path = '../app/build.gradle'
    re = /versionCode\s+(\d+)/ 

    s = File.read(path)
    if versionCodeString.nil? or versionCodeString == ""
      versionCode = s[re, 1].to_i
      versionCodeString = (versionCode + 1).to_s
    end 
    
    s[re, 1] = versionCodeString
    
    # transform 760 to 7.6.0
    versionName = versionCodeString.gsub(/(.{1})(?=.)/, '\1.\2')
    
    regexVersionName = /versionName\s+\"\d\.\d\.\d\"/ 
    s[regexVersionName, 0] = "versionName \"#{versionName}\""

    f = File.new(path, 'w')
    f.write(s)
    f.close
    
    puts "New version: #{versionCodeString}"

    #commit_and_push
    sh "cd ..;git commit -m \"Version Bump\" app/build.gradle;git push"
  end


end
